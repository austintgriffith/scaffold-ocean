import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { useContractReader } from "eth-hooks";
import { ethers } from "ethers";
import { ReactComponent as LoogieSvg } from './loogiesinspacelookingforward.svg';
import { ContractFactory } from 'ethers';
/**
 * web3 props can be passed from '../App.jsx' into your local view component for use
 * @param {*} yourLocalBalance balance on current network
 * @param {*} readContracts contracts from current chain already pre-loaded using ethers contract module. More here https://docs.ethers.io/v5/api/contract/contract/
 * @returns react component
 */
function Home({ userSigner, yourLocalBalance, readContracts, currentCount, tx, writeContracts }) {
  // you can also use hooks locally in your component of choice
  // in this case, let's keep track of 'purpose' variable from our contract
  //const purpose = useContractReader(readContracts, "YourContract", "purpose");

  const currentTime = useContractReader(readContracts, "Space", "currentTime");

  const [ actors, setActors ] = useState();

  useEffect(()=>{
    const getActors = async ()=>{
      console.log("UPDATE!",currentCount)
      let allActors = []
      for(let id=0;id<currentCount;id++){
        let actor = await readContracts.Space.actors(id)
        if(actor){
            let currentLocation = await readContracts.Space.currentLocation(id)
            allActors.push({...actor,currentLocation})
        }
      }


      setActors(allActors)
    }
    getActors()
  },[ currentCount ])

  const [ render, setRender ] = useState();
  const [ selected, setSelected ] = useState();

  useEffect(()=>{
    if(actors&&actors.length){
      console.log("RENDER LOOP!")
      let newRender = []
      for(let id=0;id<actors.length;id++){
        console.log("RENDERING",id)

        const actor = actors[id]

        //const timePassed = currentTime.sub(actor.timestamp)

        //const currentX = actor.x + timePassed.mul(actor.dx).toNumber()

        //console.log("timePassed",timePassed.toNumber())

        //console.log("actor",actor)

        //console.log("currentX",currentX)

        let extraStuff = ""
        if(selected==id){
          extraStuff=" ("+actor.currentLocation[0]+","+actor.currentLocation[1]+") ";
        }


        let rad = Math.atan2(actor.dy, actor.dx)

        let deg = (rad * (180/Math.PI))



        newRender.push(
          <div onClick={(event)=>{setSelected(id);event.stopPropagation();}} style={{position:"relative",color:"#FFFFFF",position:"absolute",left:actor.currentLocation[0],top:actor.currentLocation[1]}}>
            <LoogieSvg width={25} height={25}  style={{position:"absolute",left:-12,top:-12,transform:"rotate("+deg+"deg)",transformOrigin:"50% 50%"}}/> {id}{extraStuff}({deg})
          </div>
        )
      }
      setRender(newRender)
    }
  },[ actors, currentTime, selected ])


  return (
    <div>
      <div>Current Time: {currentTime && currentTime.toNumber()}</div>
      <div>Current Count: {currentCount && currentCount.toNumber()}</div>
      <div>ACTORS: { actors && actors.length }</div>
      <button onClick={()=>{
        tx( writeContracts.Space.launch(180,255,0,1,{gasLimit: 300000}) )
      }}>
        Launch
      </button>

      <button onClick={()=>{
        tx( writeContracts.Space.randomish({gasLimit: 300000}) )
      }}>
        Random
      </button>

      <div onClick={()=>{setSelected()}} style={{position:"relative",width:256,height:256,border:"2px solid blue",backgroundColor:"#000000"}}>
        { render }
      </div>

      <button onClick={async ()=>{
        //tx( writeContracts.Space.launch(180,255,0,1,{gasLimit: 300000}) )


        console.log("writeContracts",writeContracts)

        const contractAbi = [
          {
            "inputs": [],
            "stateMutability": "nonpayable",
            "type": "constructor"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "internalType": "address",
                "name": "previousOwner",
                "type": "address"
              },
              {
                "indexed": true,
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "OwnershipTransferred",
            "type": "event"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "name": "actors",
            "outputs": [
              {
                "internalType": "uint8",
                "name": "x",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "y",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "dx",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "dy",
                "type": "uint8"
              },
              {
                "internalType": "uint208",
                "name": "timestamp",
                "type": "uint208"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "currentCount",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint256",
                "name": "id",
                "type": "uint256"
              }
            ],
            "name": "currentLocation",
            "outputs": [
              {
                "internalType": "uint8[2]",
                "name": "",
                "type": "uint8[2]"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "currentTime",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "uint8",
                "name": "x",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "y",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "dx",
                "type": "uint8"
              },
              {
                "internalType": "uint8",
                "name": "dy",
                "type": "uint8"
              }
            ],
            "name": "launch",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "owner",
            "outputs": [
              {
                "internalType": "address",
                "name": "",
                "type": "address"
              }
            ],
            "stateMutability": "view",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "randomish",
            "outputs": [
              {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
              }
            ],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [],
            "name": "renounceOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "inputs": [
              {
                "internalType": "address",
                "name": "newOwner",
                "type": "address"
              }
            ],
            "name": "transferOwnership",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ]
/*
        const contractByteCode = "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806393c0e83a1161006657806393c0e83a14610107578063c732d20114610157578063d0dca2c81461015f578063d18e81b314610167578063f2fde38b1461016d57600080fd5b80636ada80c514610098578063707353da146100c1578063715018a6146100e25780638da5cb5b146100ec575b600080fd5b6100ab6100a6366004610812565b610180565b6040516100b8919061087d565b60405180910390f35b6100d46100cf36600461082a565b6102f0565b6040519081526020016100b8565b6100ea6103e9565b005b6000546040516001600160a01b0390911681526020016100b8565b61011a610115366004610812565b610454565b6040805160ff968716815294861660208601529285169284019290925290921660608201526001600160d01b03909116608082015260a0016100b8565b6001546100d4565b6100d46104a5565b426100d4565b6100ea61017b3660046107e4565b610695565b6101886107b0565b6000600183815481106101ab57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546101d29064010000000090046001600160d01b0316426108d6565b90506000600184815481106101f757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160029054906101000a900460ff1660ff1682026001858154811061023857634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001805460ff9092169390930393509091908690811061027357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160039054906101000a900460ff1660ff168302600186815481106102b457634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805180820190915260ff958616815261010090910485169290920390931692810192909252509392505050565b6040805160a08101825260ff808716825285811660208301908152858216938301938452848216606084019081526001600160d01b0342811660808601908152600180548082018255600082815297517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018054965199519551935190941664010000000002640100000000600160f01b031993881663010000000263ff0000001996891662010000029690961663ffff0000199a89166101000261ffff1990981692909816919091179590951797909716949094179190911792909216179055815490916103e0916108fe565b95945050505050565b6000546001600160a01b031633146104485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104526000610760565b565b6001818154811061046457600080fd5b60009182526020909120015460ff8082169250610100820481169162010000810482169163010000008204169064010000000090046001600160d01b031685565b6000806104b36001436108fe565b60408051914060208301526bffffffffffffffffffffffff1933606090811b8216928401929092523090911b16605482015260680160408051601f1981840301815291905280516020909101209050600060088260011a60f81b6001600160f81b031916901c8260001a60f81b6001600160f81b0319161760f01c9050600060088360031a60f81b6001600160f81b031916901c8360021a60f81b6001600160f81b0319161760f01c9050600060038460046105719291901a610915565b61057c9060016108b1565b9050600061058f6003600587901a610915565b61059a9060016108b1565b6040805160a08101825260ff808816825286811660208301908152868216938301938452818516606084019081526001600160d01b0342811660808601908152600180548082018255600082905296517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69097018054955198519451925190931664010000000002640100000000600160f01b031992871663010000000263ff0000001995881662010000029590951663ffff0000199988166101000261ffff1990971698909716979097179490941796909616939093171793909316919091179055805491925061068b916108fe565b9550505050505090565b6000546001600160a01b031633146106ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043f565b6001600160a01b0381166107545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043f565b61075d81610760565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806002906020820280368337509192915050565b803560ff811681146107df57600080fd5b919050565b6000602082840312156107f5578081fd5b81356001600160a01b038116811461080b578182fd5b9392505050565b600060208284031215610823578081fd5b5035919050565b6000806000806080858703121561083f578283fd5b610848856107ce565b9350610856602086016107ce565b9250610864604086016107ce565b9150610872606086016107ce565b905092959194509250565b60408101818360005b60028110156108a857815160ff16835260209283019290910190600101610886565b50505092915050565b600060ff821660ff84168060ff038211156108ce576108ce610943565b019392505050565b60006001600160d01b03838116908316818110156108f6576108f6610943565b039392505050565b60008282101561091057610910610943565b500390565b600060ff83168061093457634e487b7160e01b82526012600452602482fd5b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208ce8b2021cf71023e2b68d764a8ae1d5ecb1650b468c4171823b16ff5c71169a64736f6c63430008040033"
*/
        const contractByteCode = "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61098f8061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806393c0e83a1161006657806393c0e83a14610107578063c732d20114610157578063d0dca2c81461015f578063d18e81b314610167578063f2fde38b1461016d57600080fd5b80636ada80c514610098578063707353da146100c1578063715018a6146100e25780638da5cb5b146100ec575b600080fd5b6100ab6100a6366004610812565b610180565b6040516100b8919061087d565b60405180910390f35b6100d46100cf36600461082a565b6102f0565b6040519081526020016100b8565b6100ea6103e9565b005b6000546040516001600160a01b0390911681526020016100b8565b61011a610115366004610812565b610454565b6040805160ff968716815294861660208601529285169284019290925290921660608201526001600160d01b03909116608082015260a0016100b8565b6001546100d4565b6100d46104a5565b426100d4565b6100ea61017b3660046107e4565b610695565b6101886107b0565b6000600183815481106101ab57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546101d29064010000000090046001600160d01b0316426108d6565b90506000600184815481106101f757634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160029054906101000a900460ff1660ff1682026001858154811061023857634e487b7160e01b600052603260045260246000fd5b60009182526020822001546001805460ff9092169390930393509091908690811061027357634e487b7160e01b600052603260045260246000fd5b9060005260206000200160000160039054906101000a900460ff1660ff168302600186815481106102b457634e487b7160e01b600052603260045260246000fd5b600091825260209182902001546040805180820190915260ff958616815261010090910485169290920390931692810192909252509392505050565b6040805160a08101825260ff808716825285811660208301908152858216938301938452848216606084019081526001600160d01b0342811660808601908152600180548082018255600082815297517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69091018054965199519551935190941664010000000002640100000000600160f01b031993881663010000000263ff0000001996891662010000029690961663ffff0000199a89166101000261ffff1990981692909816919091179590951797909716949094179190911792909216179055815490916103e0916108fe565b95945050505050565b6000546001600160a01b031633146104485760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6104526000610760565b565b6001818154811061046457600080fd5b60009182526020909120015460ff8082169250610100820481169162010000810482169163010000008204169064010000000090046001600160d01b031685565b6000806104b36001436108fe565b60408051914060208301526bffffffffffffffffffffffff1933606090811b8216928401929092523090911b16605482015260680160408051601f1981840301815291905280516020909101209050600060088260011a60f81b6001600160f81b031916901c8260001a60f81b6001600160f81b0319161760f01c9050600060088360031a60f81b6001600160f81b031916901c8360021a60f81b6001600160f81b0319161760f01c9050600060038460046105719291901a610915565b61057c9060016108b1565b9050600061058f6003600587901a610915565b61059a9060016108b1565b6040805160a08101825260ff808816825286811660208301908152868216938301938452818516606084019081526001600160d01b0342811660808601908152600180548082018255600082905296517fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf69097018054955198519451925190931664010000000002640100000000600160f01b031992871663010000000263ff0000001995881662010000029590951663ffff0000199988166101000261ffff1990971698909716979097179490941796909616939093171793909316919091179055805491925061068b916108fe565b9550505050505090565b6000546001600160a01b031633146106ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161043f565b6001600160a01b0381166107545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161043f565b61075d81610760565b50565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806002906020820280368337509192915050565b803560ff811681146107df57600080fd5b919050565b6000602082840312156107f5578081fd5b81356001600160a01b038116811461080b578182fd5b9392505050565b600060208284031215610823578081fd5b5035919050565b6000806000806080858703121561083f578283fd5b610848856107ce565b9350610856602086016107ce565b9250610864604086016107ce565b9150610872606086016107ce565b905092959194509250565b60408101818360005b60028110156108a857815160ff16835260209283019290910190600101610886565b50505092915050565b600060ff821660ff84168060ff038211156108ce576108ce610943565b019392505050565b60006001600160d01b03838116908316818110156108f6576108f6610943565b039392505050565b60008282101561091057610910610943565b500390565b600060ff83168061093457634e487b7160e01b82526012600452602482fd5b8060ff84160691505092915050565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208ce8b2021cf71023e2b68d764a8ae1d5ecb1650b468c4171823b16ff5c71169a64736f6c63430008040033"

        console.log("deploying...")

        const factory = new ContractFactory(contractAbi, contractByteCode, userSigner);

        //const deployArgs = []

        console.log("awaiting deploy...")
        // If your contract requires constructor args, you can specify them here
        const contract = await factory.deploy(/*deployArgs*/);

        console.log("contract.address",contract.address);
        console.log("contract.deployTransaction",contract.deployTransaction);
      }}>
        Deploy
      </button>


    </div>
  );
}

export default Home;
